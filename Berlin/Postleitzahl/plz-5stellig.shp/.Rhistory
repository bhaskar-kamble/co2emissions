names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_gebaeude_nutzflaeche")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_gebaeude_nutzflaeche")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
area_prop_table <- area_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
area_prop_table
bezirk_areas <- read.csv2("./FindArea/areas_berlin_bezirke.csv")
bezirk_areas <- bezirk_areas[ , c("bezirk","wohnflaeche_gebaeude_insgesamt","wohnflaeche_gebaeude_1FH","wohnflaeche_gebaeude_2FH","wohnflaeche_gebaeude_MFH","abrechnungsjahr")]
bezirk_areas
bezirk <- "pankow"
bezirk_areas_subset <- bezirk_areas[bezirk_areas$bezirk=="pankow"  ,  ]
bezirk_areas_subset
append2018trend <- function(obj) { #obj can contain only ONE bezirk
obj_temp <- obj[obj$abrechnungsjahr!=2018 , ]
var_list <- names(obj)[!(names(obj) %in% c("abrechnungsjahr","bezirk"))]
storage <- list()
data2018 <- obj[obj$abrechnungsjahr==2017 , ]
data2018$abrechnungsjahr <- 2018
#obj_new <- obj
for (varname in var_list) {
storage[[varname]] <- lm(get(varname) ~ abrechnungsjahr , data = obj_temp)
data2018[[varname]] <- as.numeric(predict(storage[[varname]] , newdata = data2018))
}
obj_new <- rbind(obj_temp , data2018)
return(obj_new)
}
bezirk_areas_subset <- append2018trend(bezirk_areas_subset)
bezirk_areas_subset <- bezirk_areas_subset[ , c("bezirk" , "wohnflaeche_gebaeude_1FH" , "wohnflaeche_gebaeude_2FH" , "wohnflaeche_gebaeude_MFH" , "abrechnungsjahr")]
bezirk_areas_subset$wohnflaeche_gebaeude_SFH <- bezirk_areas_subset$wohnflaeche_gebaeude_1FH + bezirk_areas_subset$wohnflaeche_gebaeude_2FH
bezirk_areas_subset <- bezirk_areas_subset[ , c("abrechnungsjahr" , "bezirk" , "wohnflaeche_gebaeude_SFH" , "wohnflaeche_gebaeude_MFH")]
str(bezirk_areas_subset)
totalArea <- bezirk_areas_subset
bezirk_areas_subset
names(bezirk_areas_subset)
totalArea <- bezirk_areas_subset
names(totalArea) <- c("abrechnungsjahr","bezirk","areaSFH","areaMFH")
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
totalArea
df1 <- data.frame(xx=1:10 , y = -10:-1)
df1
df1 <- data.frame(xx=1:10 , yy = -10:-1)
df1
df$xx
df1$xx
df1[["xx"]]
df1["xx"]
xvar <- "xx"
df1[[xvar]]
df1[["xx"]]
lmod <- lm(yy~xx , data=df1)
lmod
xvar <- "xx"
yvar <- "yy"
lmod2 <- lm(get(yvar)~get(xvar) , data=df1)
lmod2
df1
df2 <- data.frame(xx=11:20 , yy=rep(0,10))
df2
predict(lmod , newdata = df2)
as.numeric(predict(lmod , newdata = df2))
as.integer(predict(lmod , newdata = df2))
0.1*(predict(lmod , newdata = df2))
0.1*(predict(lmod2 , newdata = df2))
lmod2
lm(df1$yy~df1$xx)
lmod3 <- lm(df1$yy~df1$xx)
predict(lmod3 , newdata = df2)
df1
df2
as.data.frame(predict(lmod3 , newdata = df2))
lmod2
df2
predict(lmod2 , newdata=df2)
predict(lmod2 , newdata=1.0)
testdf <- data.frame(xx=11)
testdf
predict(lmod2 , newdata=testdf)
testdf <- data.frame(xx=12)
predict(lmod2 , newdata=testdf)
testdf <- data.frame(xx=13)
predict(lmod2 , newdata=testdf)
xchar <- "xx"
get(xchar)
testdf <- data.frame(get(xchar)=13)
testdf <- data.frame()
testdf
testdf[["xx"]] <- 1:3
df1
df[["zz"]] <- rep("qq",10)
df[["zz"]] <- 31:40
df$zz <- 31:40
df1[["zz"]] <- 31:40
df1
?sort
sort(c(6,3,9,0,1))
order(c(6,3,9,0,1))
x <- c(6,3,9,0,1)
sort(x)
x[order(x)]
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yvar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yvar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
obj <- obj[ , !(names(obj) %in% dropCols)]
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yvar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yvar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[, names(obj)]
newData <- rbind(obj,newData)
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
totalArea_allyears <- appendLinearTrend(totalArea , "abrechnungsjahr" , "bezirk" , 2002:2009)
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
obj <- obj[ , !(names(obj) %in% dropCols)]
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yVar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yVar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[, names(obj)]
newData <- rbind(obj,newData)
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
totalArea_allyears <- appendLinearTrend(totalArea , "abrechnungsjahr" , "bezirk" , 2002:2009)
totalArea_allyears
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
require(ggplot2)
ggplot() + geom_point(data=totalArea_allyears , aes(x=abrechnungsjahr,y=areaSFH))
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/")
#load("../MFH20022018_v2.RData")
load("../SFH20022018_v2.RData")
#In SFH20022018, abrechnungsjahr and verbrauch_gesamt_kwh are character - change then to int and numeric
SFH20022018$abrechnungsjahr <- as.integer(SFH20022018$abrechnungsjahr)
SFH20022018$verbrauch_gesamt_kwh <- gsub("," , "." , SFH20022018$verbrauch_gesamt_kwh)
SFH20022018$verbrauch_gesamt_kwh <- as.numeric(SFH20022018$verbrauch_gesamt_kwh)
SFH20022018$gtype <- "SFH"
#MFH20022018$gtype <- "MFH"
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/")
load("../MFH20022018_v2.RData")
#load("SFH20022018_v2.RData")
#In SFH20022018, abrechnungsjahr and verbrauch_gesamt_kwh are character - change then to int and numeric
#SFH20022018$abrechnungsjahr <- as.integer(SFH20022018$abrechnungsjahr)
#SFH20022018$verbrauch_gesamt_kwh <- gsub("," , "." , SFH20022018$verbrauch_gesamt_kwh)
#SFH20022018$verbrauch_gesamt_kwh <- as.numeric(SFH20022018$verbrauch_gesamt_kwh)
#SFH20022018$gtype <- "SFH"
MFH20022018$gtype <- "MFH"
subset_data_by_region <- function(inputdata , region) {
outputdata <- inputdata[inputdata$Landkreis_von_GS == region , ]
return(outputdata)
}
weather_data <- read.table("berlin_wetter_tegel.txt",header=TRUE)
names(weather_data) <- c("wind","sun","bedeckung","temperatur")
weather_data$abrechnungsjahr <- 2002:2018
berlin_sfh <- subset_data_by_region(SFH20022018,"Berlin, Stadt")
berlin_mfh <- subset_data_by_region(MFH20022018,"Berlin, Stadt")
#remove additional outliers
#berlin_mfh <- remove_outliers(berlin_mfh , c("gebaeude_baujahr","gebaeude_nutzflaeche","verbrauch_gesamt_kwh","verbrauch_gesamt_kwh_spez"))
berlin_mfh <- berlin_mfh[(berlin_mfh$verbrauch_gesamt_kwh_spez > 15)&(berlin_mfh$verbrauch_gesamt_kwh_spez < 400) , ]
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="fernwaerme"] <- "waerme"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="nahwaerme"] <- "waerme"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe"] <- "strom"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe_luft"] <- "strom"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe_wasser"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="fernwaerme"] <- "waerme"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="nahwaerme"] <- "waerme"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe_luft"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe_wasser"] <- "strom"
getwd()
plz_bezirk <- read.csv2("./Postleitzahl/plz_bezirk_long.csv" , stringsAsFactors = FALSE)
plz_bezirk
berlin_mfh$sto_plz <- as.integer(berlin_mfh$sto_plz)
berlin_sfh$sto_plz <- as.integer(berlin_sfh$sto_plz)
berlin_sfh <- merge(berlin_sfh , plz_bezirk , by.x="sto_plz" , by.y = "plz")
berlin_mfh <- merge(berlin_mfh , plz_bezirk , by.x="sto_plz" , by.y = "plz")
find_proportions <- function(obj,drop_cols) {# from the file BerlinPresentationCO2BalanceUnified_v6.Rmd
obj <- obj[ , !(names(obj) %in% drop_cols)]
obj <- obj / rowSums(obj)
obj <- 100*obj
obj$abrechnungsjahr <- 2002:2018
return(obj)
}
energy_proportions_by_et <- function(bezirk,input_data,drop_cols) {
# uses find_proportions()
#input_data is either berlin_mfh or berlin_sfh
require(dplyr)
input_data <- input_data[input_data$bezirk == bezirk , ]
by_year_ET <- group_by(input_data,abrechnungsjahr,energietraeger)
return_data <- as.data.frame(summarize(by_year_ET,sum(verbrauch_gesamt_kwh)))
names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_verbrauch_gesamt_kwh")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_verbrauch_gesamt_kwh")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
energy_prop_table <- energy_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
energy_prop_table
area_proportions_by_et <- function(bezirk,input_data,drop_cols) {
#input_data is either berlin_mfh or berlin_sfh
require(dplyr)
input_data <- input_data[input_data$bezirk == bezirk , ]
by_year_ET <- group_by(input_data,abrechnungsjahr,energietraeger)
return_data <- as.data.frame(summarize(by_year_ET,sum(gebaeude_nutzflaeche)))
names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_gebaeude_nutzflaeche")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_gebaeude_nutzflaeche")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
area_prop_table <- area_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
area_prop_table
bezirk_areas <- read.csv2("./FindArea/areas_berlin_bezirke.csv")
bezirk_areas <- bezirk_areas[ , c("bezirk","wohnflaeche_gebaeude_insgesamt","wohnflaeche_gebaeude_1FH","wohnflaeche_gebaeude_2FH","wohnflaeche_gebaeude_MFH","abrechnungsjahr")]
bezirk_areas
bezirk <- "pankow"
bezirk_areas_subset <- bezirk_areas[bezirk_areas$bezirk=="pankow"  ,  ]
bezirk_areas_subset
append2018trend <- function(obj) { #obj can contain only ONE bezirk
obj_temp <- obj[obj$abrechnungsjahr!=2018 , ]
var_list <- names(obj)[!(names(obj) %in% c("abrechnungsjahr","bezirk"))]
storage <- list()
data2018 <- obj[obj$abrechnungsjahr==2017 , ]
data2018$abrechnungsjahr <- 2018
#obj_new <- obj
for (varname in var_list) {
storage[[varname]] <- lm(get(varname) ~ abrechnungsjahr , data = obj_temp)
data2018[[varname]] <- as.numeric(predict(storage[[varname]] , newdata = data2018))
}
obj_new <- rbind(obj_temp , data2018)
return(obj_new)
}
bezirk_areas_subset <- append2018trend(bezirk_areas_subset)
bezirk_areas_subset <- bezirk_areas_subset[ , c("bezirk" , "wohnflaeche_gebaeude_1FH" , "wohnflaeche_gebaeude_2FH" , "wohnflaeche_gebaeude_MFH" , "abrechnungsjahr")]
bezirk_areas_subset$wohnflaeche_gebaeude_SFH <- bezirk_areas_subset$wohnflaeche_gebaeude_1FH + bezirk_areas_subset$wohnflaeche_gebaeude_2FH
bezirk_areas_subset <- bezirk_areas_subset[ , c("abrechnungsjahr" , "bezirk" , "wohnflaeche_gebaeude_SFH" , "wohnflaeche_gebaeude_MFH")]
str(bezirk_areas_subset)
totalArea <- bezirk_areas_subset
names(totalArea) <- c("abrechnungsjahr","bezirk","areaSFH","areaMFH")
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
totalArea
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
obj <- obj[ , !(names(obj) %in% dropCols)]
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yVar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yVar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[, names(obj)]
newData <- rbind(obj,newData)
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
totalArea <- appendLinearTrend(totalArea , "abrechnungsjahr" , "bezirk" , 2002:2009)
bezirk_data <- berlin_sfh[berlin_sfh$bezirk == bezirk , ]
createRegData01 <- function(hev_data) {#no multivariate analysis for weather, based on BerlinPresentationCO2BalanceSFH_v6.R, line 530
require(dplyr)
by_AbJahr <- group_by(hev_data , abrechnungsjahr)
#RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(gebaeude_baujahr,na.rm=TRUE),mean(gebaeude_nutzflaeche,na.rm=TRUE),mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
names(RegData_temp) <- c("abrechnungsjahr","mean_spzverbrauch")
RegDatafunc <- RegData_temp
detach("package:dplyr")
return(RegDatafunc)
}
spz_verbrauch_mean <- createRegData01(bezirk_data)
spz_verbrauch_mean
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = bezirk_areas_subset$wohnflaeche_gebaeude_SFH*spz_verbrauch_mean$mean_spz_verberauch)
bezirk_areas_subset
c(2:7 , -1)
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/")
#load("../MFH20022018_v2.RData")
load("../SFH20022018_v2.RData")
#In SFH20022018, abrechnungsjahr and verbrauch_gesamt_kwh are character - change then to int and numeric
SFH20022018$abrechnungsjahr <- as.integer(SFH20022018$abrechnungsjahr)
SFH20022018$verbrauch_gesamt_kwh <- gsub("," , "." , SFH20022018$verbrauch_gesamt_kwh)
SFH20022018$verbrauch_gesamt_kwh <- as.numeric(SFH20022018$verbrauch_gesamt_kwh)
SFH20022018$gtype <- "SFH"
#MFH20022018$gtype <- "MFH"
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/")
load("../MFH20022018_v2.RData")
#load("SFH20022018_v2.RData")
#In SFH20022018, abrechnungsjahr and verbrauch_gesamt_kwh are character - change then to int and numeric
#SFH20022018$abrechnungsjahr <- as.integer(SFH20022018$abrechnungsjahr)
#SFH20022018$verbrauch_gesamt_kwh <- gsub("," , "." , SFH20022018$verbrauch_gesamt_kwh)
#SFH20022018$verbrauch_gesamt_kwh <- as.numeric(SFH20022018$verbrauch_gesamt_kwh)
#SFH20022018$gtype <- "SFH"
MFH20022018$gtype <- "MFH"
subset_data_by_region <- function(inputdata , region) {
outputdata <- inputdata[inputdata$Landkreis_von_GS == region , ]
return(outputdata)
}
weather_data <- read.table("berlin_wetter_tegel.txt",header=TRUE)
names(weather_data) <- c("wind","sun","bedeckung","temperatur")
weather_data$abrechnungsjahr <- 2002:2018
berlin_sfh <- subset_data_by_region(SFH20022018,"Berlin, Stadt")
berlin_mfh <- subset_data_by_region(MFH20022018,"Berlin, Stadt")
#remove additional outliers
#berlin_mfh <- remove_outliers(berlin_mfh , c("gebaeude_baujahr","gebaeude_nutzflaeche","verbrauch_gesamt_kwh","verbrauch_gesamt_kwh_spez"))
berlin_mfh <- berlin_mfh[(berlin_mfh$verbrauch_gesamt_kwh_spez > 15)&(berlin_mfh$verbrauch_gesamt_kwh_spez < 400) , ]
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="fernwaerme"] <- "waerme"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="nahwaerme"] <- "waerme"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe"] <- "strom"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe_luft"] <- "strom"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe_wasser"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="fernwaerme"] <- "waerme"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="nahwaerme"] <- "waerme"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe_luft"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe_wasser"] <- "strom"
getwd()
plz_bezirk <- read.csv2("./Postleitzahl/plz_bezirk_long.csv" , stringsAsFactors = FALSE)
plz_bezirk
berlin_mfh$sto_plz <- as.integer(berlin_mfh$sto_plz)
berlin_sfh$sto_plz <- as.integer(berlin_sfh$sto_plz)
berlin_sfh <- merge(berlin_sfh , plz_bezirk , by.x="sto_plz" , by.y = "plz")
berlin_mfh <- merge(berlin_mfh , plz_bezirk , by.x="sto_plz" , by.y = "plz")
find_proportions <- function(obj,drop_cols) {# from the file BerlinPresentationCO2BalanceUnified_v6.Rmd
obj <- obj[ , !(names(obj) %in% drop_cols)]
obj <- obj / rowSums(obj)
obj <- 100*obj
obj$abrechnungsjahr <- 2002:2018
return(obj)
}
energy_proportions_by_et <- function(bezirk,input_data,drop_cols) {
# uses find_proportions()
#input_data is either berlin_mfh or berlin_sfh
require(dplyr)
input_data <- input_data[input_data$bezirk == bezirk , ]
by_year_ET <- group_by(input_data,abrechnungsjahr,energietraeger)
return_data <- as.data.frame(summarize(by_year_ET,sum(verbrauch_gesamt_kwh)))
names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_verbrauch_gesamt_kwh")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_verbrauch_gesamt_kwh")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
energy_prop_table <- energy_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
energy_prop_table
area_proportions_by_et <- function(bezirk,input_data,drop_cols) {
#input_data is either berlin_mfh or berlin_sfh
require(dplyr)
input_data <- input_data[input_data$bezirk == bezirk , ]
by_year_ET <- group_by(input_data,abrechnungsjahr,energietraeger)
return_data <- as.data.frame(summarize(by_year_ET,sum(gebaeude_nutzflaeche)))
names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_gebaeude_nutzflaeche")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_gebaeude_nutzflaeche")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
area_prop_table <- area_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
area_prop_table
bezirk_areas <- read.csv2("./FindArea/areas_berlin_bezirke.csv")
bezirk_areas <- bezirk_areas[ , c("bezirk","wohnflaeche_gebaeude_insgesamt","wohnflaeche_gebaeude_1FH","wohnflaeche_gebaeude_2FH","wohnflaeche_gebaeude_MFH","abrechnungsjahr")]
bezirk_areas
bezirk <- "pankow"
bezirk_areas_subset <- bezirk_areas[bezirk_areas$bezirk=="pankow"  ,  ]
bezirk_areas_subset
# I think you don't need this function anymore
append2018trend <- function(obj) { #obj can contain only ONE bezirk
obj_temp <- obj[obj$abrechnungsjahr!=2018 , ]
var_list <- names(obj)[!(names(obj) %in% c("abrechnungsjahr","bezirk"))]
storage <- list()
data2018 <- obj[obj$abrechnungsjahr==2017 , ]
data2018$abrechnungsjahr <- 2018
#obj_new <- obj
for (varname in var_list) {
storage[[varname]] <- lm(get(varname) ~ abrechnungsjahr , data = obj_temp)
data2018[[varname]] <- as.numeric(predict(storage[[varname]] , newdata = data2018))
}
obj_new <- rbind(obj_temp , data2018)
return(obj_new)
}
#bezirk_areas_subset <- append2018trend(bezirk_areas_subset)
bezirk_areas_subset <- bezirk_areas_subset[ , c("bezirk" , "wohnflaeche_gebaeude_1FH" , "wohnflaeche_gebaeude_2FH" , "wohnflaeche_gebaeude_MFH" , "abrechnungsjahr")]
bezirk_areas_subset$wohnflaeche_gebaeude_SFH <- bezirk_areas_subset$wohnflaeche_gebaeude_1FH + bezirk_areas_subset$wohnflaeche_gebaeude_2FH
bezirk_areas_subset <- bezirk_areas_subset[ , c("abrechnungsjahr" , "bezirk" , "wohnflaeche_gebaeude_SFH" , "wohnflaeche_gebaeude_MFH")]
#str(bezirk_areas_subset)
totalArea <- bezirk_areas_subset
names(totalArea) <- c("abrechnungsjahr","bezirk","areaSFH","areaMFH")
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
totalArea
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
obj <- obj[ , !(names(obj) %in% dropCols)]
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yVar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yVar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[, names(obj)]
newData <- rbind(obj,newData)
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
totalArea <- appendLinearTrend(totalArea , "abrechnungsjahr" , "bezirk" , c(2002:2009 , 2018))
totalArea
bezirk_data <- berlin_sfh[berlin_sfh$bezirk == bezirk , ]
createRegData01 <- function(hev_data) {#no multivariate analysis for weather, based on BerlinPresentationCO2BalanceSFH_v6.R, line 530
require(dplyr)
by_AbJahr <- group_by(hev_data , abrechnungsjahr)
#RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(gebaeude_baujahr,na.rm=TRUE),mean(gebaeude_nutzflaeche,na.rm=TRUE),mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
names(RegData_temp) <- c("abrechnungsjahr","mean_spzverbrauch")
RegDatafunc <- RegData_temp
detach("package:dplyr")
return(RegDatafunc)
}
spz_verbrauch_mean <- createRegData01(bezirk_data)
spz_verbrauch_mean
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = bezirk_areas_subset$wohnflaeche_gebaeude_SFH*spz_verbrauch_mean$mean_spz_verberauch)
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = totalArea$areaSFH*spz_verbrauch_mean$mean_spz_verberauch)
spz_verbrauch_mean$mean_spz_verberauch
spz_verbrauch_mean$mean_spzverberauch
spz_verbrauch_mean$mean_spzverbrauch
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = totalArea$areaSFH*spz_verbrauch_mean$mean_spzvrberauch)
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = totalArea$areaSFH*spz_verbrauch_mean$mean_spzverbrauch)
(2002:2018)[!((2002:2018) %in% c(2002,2006,2009,2018)]
(2002:2018)[!((2002:2018) %in% c(2002,2006,2009,2018))]
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/Postleitzahl/plz-5stellig.shp")
library(sf)
#library(ggplot2)
library(tmap)
library(tmaptools)
library(leaflet)
library(dplyr)
library(ggplot2)
library(sf)
#library(ggplot2)
library(tmap)
library(tmaptools)
library(leaflet)
library(dplyr)
library(ggplot2)
options(scipen = 999)
plz_daten <- read.csv("plz-5stellig-daten.csv")
plz_berlin <- read.csv2("plz_waerme_dist.csv")
in_berlin <- plz_daten$plz %in% plz_berlin$plz
plz_daten_in_berlin <- plz_daten[in_berlin , ]
plz_berlin_merged <- merge(plz_daten_in_berlin , plz_berlin , by.x = "plz" , by.y = "plz")
mymap <- st_read("plz-5stellig.shp" , stringsAsFactors = FALSE)
mymap$plz <- as.integer(mymap$plz)
mymap_berlin <- mymap[mymap$plz %in% plz_berlin$plz , ]
map_and_data <- inner_join(mymap_berlin , plz_berlin_merged , by = "plz")
ggplot(map_and_data) + geom_sf(aes(fill=prop))
?ggsave
ggplot(map_and_data) + geom_sf(aes(fill=prop))
ggsave("berlin_bezirke_districtheating.jpg" , height=4 , width=4)
ggsave("berlin_bezirke_districtheating.pdf" , height=4 , width=4)
ggsave("berlin_bezirke_districtheating.pdf" , height=10 , width=10)
ggsave("berlin_bezirke_districtheating.jpg" , height=10 , width=10)
write.csv2(plz_berlin_merged , file = "plz_berlin_merged.csv" , row.names = FALSE)
