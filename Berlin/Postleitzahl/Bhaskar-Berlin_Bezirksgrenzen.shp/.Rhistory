totalArea <- bezirk_areas_subset
names(totalArea) <- c("abrechnungsjahr","bezirk","areaSFH","areaMFH")
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
totalArea
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
obj <- obj[ , !(names(obj) %in% dropCols)]
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yVar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yVar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[, names(obj)]
newData <- rbind(obj,newData)
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
totalArea <- appendLinearTrend(totalArea , "abrechnungsjahr" , "bezirk" , 2002:2009)
bezirk_data <- berlin_sfh[berlin_sfh$bezirk == bezirk , ]
createRegData01 <- function(hev_data) {#no multivariate analysis for weather, based on BerlinPresentationCO2BalanceSFH_v6.R, line 530
require(dplyr)
by_AbJahr <- group_by(hev_data , abrechnungsjahr)
#RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(gebaeude_baujahr,na.rm=TRUE),mean(gebaeude_nutzflaeche,na.rm=TRUE),mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
names(RegData_temp) <- c("abrechnungsjahr","mean_spzverbrauch")
RegDatafunc <- RegData_temp
detach("package:dplyr")
return(RegDatafunc)
}
spz_verbrauch_mean <- createRegData01(bezirk_data)
spz_verbrauch_mean
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = bezirk_areas_subset$wohnflaeche_gebaeude_SFH*spz_verbrauch_mean$mean_spz_verberauch)
bezirk_areas_subset
c(2:7 , -1)
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/")
#load("../MFH20022018_v2.RData")
load("../SFH20022018_v2.RData")
#In SFH20022018, abrechnungsjahr and verbrauch_gesamt_kwh are character - change then to int and numeric
SFH20022018$abrechnungsjahr <- as.integer(SFH20022018$abrechnungsjahr)
SFH20022018$verbrauch_gesamt_kwh <- gsub("," , "." , SFH20022018$verbrauch_gesamt_kwh)
SFH20022018$verbrauch_gesamt_kwh <- as.numeric(SFH20022018$verbrauch_gesamt_kwh)
SFH20022018$gtype <- "SFH"
#MFH20022018$gtype <- "MFH"
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/")
load("../MFH20022018_v2.RData")
#load("SFH20022018_v2.RData")
#In SFH20022018, abrechnungsjahr and verbrauch_gesamt_kwh are character - change then to int and numeric
#SFH20022018$abrechnungsjahr <- as.integer(SFH20022018$abrechnungsjahr)
#SFH20022018$verbrauch_gesamt_kwh <- gsub("," , "." , SFH20022018$verbrauch_gesamt_kwh)
#SFH20022018$verbrauch_gesamt_kwh <- as.numeric(SFH20022018$verbrauch_gesamt_kwh)
#SFH20022018$gtype <- "SFH"
MFH20022018$gtype <- "MFH"
subset_data_by_region <- function(inputdata , region) {
outputdata <- inputdata[inputdata$Landkreis_von_GS == region , ]
return(outputdata)
}
weather_data <- read.table("berlin_wetter_tegel.txt",header=TRUE)
names(weather_data) <- c("wind","sun","bedeckung","temperatur")
weather_data$abrechnungsjahr <- 2002:2018
berlin_sfh <- subset_data_by_region(SFH20022018,"Berlin, Stadt")
berlin_mfh <- subset_data_by_region(MFH20022018,"Berlin, Stadt")
#remove additional outliers
#berlin_mfh <- remove_outliers(berlin_mfh , c("gebaeude_baujahr","gebaeude_nutzflaeche","verbrauch_gesamt_kwh","verbrauch_gesamt_kwh_spez"))
berlin_mfh <- berlin_mfh[(berlin_mfh$verbrauch_gesamt_kwh_spez > 15)&(berlin_mfh$verbrauch_gesamt_kwh_spez < 400) , ]
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="fernwaerme"] <- "waerme"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="nahwaerme"] <- "waerme"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe"] <- "strom"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe_luft"] <- "strom"
berlin_mfh$energietraeger[berlin_mfh$energietraeger=="waermepumpe_wasser"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="fernwaerme"] <- "waerme"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="nahwaerme"] <- "waerme"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe_luft"] <- "strom"
berlin_sfh$energietraeger[berlin_sfh$energietraeger=="waermepumpe_wasser"] <- "strom"
getwd()
plz_bezirk <- read.csv2("./Postleitzahl/plz_bezirk_long.csv" , stringsAsFactors = FALSE)
plz_bezirk
berlin_mfh$sto_plz <- as.integer(berlin_mfh$sto_plz)
berlin_sfh$sto_plz <- as.integer(berlin_sfh$sto_plz)
berlin_sfh <- merge(berlin_sfh , plz_bezirk , by.x="sto_plz" , by.y = "plz")
berlin_mfh <- merge(berlin_mfh , plz_bezirk , by.x="sto_plz" , by.y = "plz")
find_proportions <- function(obj,drop_cols) {# from the file BerlinPresentationCO2BalanceUnified_v6.Rmd
obj <- obj[ , !(names(obj) %in% drop_cols)]
obj <- obj / rowSums(obj)
obj <- 100*obj
obj$abrechnungsjahr <- 2002:2018
return(obj)
}
energy_proportions_by_et <- function(bezirk,input_data,drop_cols) {
# uses find_proportions()
#input_data is either berlin_mfh or berlin_sfh
require(dplyr)
input_data <- input_data[input_data$bezirk == bezirk , ]
by_year_ET <- group_by(input_data,abrechnungsjahr,energietraeger)
return_data <- as.data.frame(summarize(by_year_ET,sum(verbrauch_gesamt_kwh)))
names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_verbrauch_gesamt_kwh")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_verbrauch_gesamt_kwh")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
energy_prop_table <- energy_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
energy_prop_table
area_proportions_by_et <- function(bezirk,input_data,drop_cols) {
#input_data is either berlin_mfh or berlin_sfh
require(dplyr)
input_data <- input_data[input_data$bezirk == bezirk , ]
by_year_ET <- group_by(input_data,abrechnungsjahr,energietraeger)
return_data <- as.data.frame(summarize(by_year_ET,sum(gebaeude_nutzflaeche)))
names(return_data) <- c("abrechnungsjahr" ,"energietraeger" ,"sum_gebaeude_nutzflaeche")
detach(package:dplyr)
require(reshape2)
return_data <- dcast(return_data , abrechnungsjahr ~ energietraeger , value.var = "sum_gebaeude_nutzflaeche")
return_data[is.na(return_data)]=0.0
return_data <- find_proportions(return_data , "abrechnungsjahr")
return(return_data)
}
bezirk <- "pankow"
area_prop_table <- area_proportions_by_et(bezirk,berlin_sfh,"abrechnungsjahr")
area_prop_table
bezirk_areas <- read.csv2("./FindArea/areas_berlin_bezirke.csv")
bezirk_areas <- bezirk_areas[ , c("bezirk","wohnflaeche_gebaeude_insgesamt","wohnflaeche_gebaeude_1FH","wohnflaeche_gebaeude_2FH","wohnflaeche_gebaeude_MFH","abrechnungsjahr")]
bezirk_areas
bezirk <- "pankow"
bezirk_areas_subset <- bezirk_areas[bezirk_areas$bezirk=="pankow"  ,  ]
bezirk_areas_subset
# I think you don't need this function anymore
append2018trend <- function(obj) { #obj can contain only ONE bezirk
obj_temp <- obj[obj$abrechnungsjahr!=2018 , ]
var_list <- names(obj)[!(names(obj) %in% c("abrechnungsjahr","bezirk"))]
storage <- list()
data2018 <- obj[obj$abrechnungsjahr==2017 , ]
data2018$abrechnungsjahr <- 2018
#obj_new <- obj
for (varname in var_list) {
storage[[varname]] <- lm(get(varname) ~ abrechnungsjahr , data = obj_temp)
data2018[[varname]] <- as.numeric(predict(storage[[varname]] , newdata = data2018))
}
obj_new <- rbind(obj_temp , data2018)
return(obj_new)
}
#bezirk_areas_subset <- append2018trend(bezirk_areas_subset)
bezirk_areas_subset <- bezirk_areas_subset[ , c("bezirk" , "wohnflaeche_gebaeude_1FH" , "wohnflaeche_gebaeude_2FH" , "wohnflaeche_gebaeude_MFH" , "abrechnungsjahr")]
bezirk_areas_subset$wohnflaeche_gebaeude_SFH <- bezirk_areas_subset$wohnflaeche_gebaeude_1FH + bezirk_areas_subset$wohnflaeche_gebaeude_2FH
bezirk_areas_subset <- bezirk_areas_subset[ , c("abrechnungsjahr" , "bezirk" , "wohnflaeche_gebaeude_SFH" , "wohnflaeche_gebaeude_MFH")]
#str(bezirk_areas_subset)
totalArea <- bezirk_areas_subset
names(totalArea) <- c("abrechnungsjahr","bezirk","areaSFH","areaMFH")
require(ggplot2)
ggplot() + geom_point(data=totalArea , aes(x=abrechnungsjahr,y=areaSFH))
totalArea
appendLinearTrend <- function(obj , xVar , dropCols , missingValues) {
# A function to put missing values by linear trend - does it for all columns except xVar and dropCols
# obj is the data frame, and "missingValues" is the list of x-values for which you calculate the y-values
# xVar is the name of the x-variable in the data frame
obj <- obj[ , !(names(obj) %in% dropCols)]
newData <- data.frame(placeholder_name = missingValues)
names(newData) <- xVar
yvars <- names(obj)[ !(names(obj) %in% c(xVar,dropCols))]
for (yVar in yvars) {
linMod <- lm(get(yVar) ~ get(xVar) , data = obj)
newData[[yVar]] <- as.numeric(predict(linMod , newdata = newData))
}
newData <- newData[, names(obj)]
newData <- rbind(obj,newData)
newData <- newData[order(newData[[xVar]])  ,  ]
return(newData)
}
totalArea <- appendLinearTrend(totalArea , "abrechnungsjahr" , "bezirk" , c(2002:2009 , 2018))
totalArea
bezirk_data <- berlin_sfh[berlin_sfh$bezirk == bezirk , ]
createRegData01 <- function(hev_data) {#no multivariate analysis for weather, based on BerlinPresentationCO2BalanceSFH_v6.R, line 530
require(dplyr)
by_AbJahr <- group_by(hev_data , abrechnungsjahr)
#RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(gebaeude_baujahr,na.rm=TRUE),mean(gebaeude_nutzflaeche,na.rm=TRUE),mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
RegData_temp <- as.data.frame(summarize(by_AbJahr,mean(verbrauch_gesamt_kwh_spez,na.rm=TRUE)))
names(RegData_temp) <- c("abrechnungsjahr","mean_spzverbrauch")
RegDatafunc <- RegData_temp
detach("package:dplyr")
return(RegDatafunc)
}
spz_verbrauch_mean <- createRegData01(bezirk_data)
spz_verbrauch_mean
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = bezirk_areas_subset$wohnflaeche_gebaeude_SFH*spz_verbrauch_mean$mean_spz_verberauch)
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = totalArea$areaSFH*spz_verbrauch_mean$mean_spz_verberauch)
spz_verbrauch_mean$mean_spz_verberauch
spz_verbrauch_mean$mean_spzverberauch
spz_verbrauch_mean$mean_spzverbrauch
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = totalArea$areaSFH*spz_verbrauch_mean$mean_spzvrberauch)
totalConsumption <- data.frame(abrechnungsjahr = 2002:2018,gesamtVerbrauch = totalArea$areaSFH*spz_verbrauch_mean$mean_spzverbrauch)
(2002:2018)[!((2002:2018) %in% c(2002,2006,2009,2018)]
(2002:2018)[!((2002:2018) %in% c(2002,2006,2009,2018))]
require(catdata)
install.packages("catdata")
require(catdata)
head(reader)
data(reader)
head(reader)
reader_f <- reader
reader_f$RegularReader <- factor(ifelse(reader_f$RegularReader , "yes" , "no") , levels = c("yes" , "no"))
reader_f
reader
reader_f$Working <- factor(ifelse(reader_f$Working , "yes" , "no") , levels = c("yes" , "no"))
reader_f$Age <- factor(c("18 to 29" , "30 to 39" , "40 to 49")[reader_f$Age], levels = c("18 to 29" , "30 to 39" , "40 to 49"))
reader_f$Education <- factor(paste0("L" , 1:4)[reader_f$Education - 10], levels = paste0("L" , 1:4))
head(reader_f)
reader_f
reader_f
4*3*4
sum(reader_f$Freq)
307+355+279
xtabs(Freq~Age , data=reader_f)
xtabs(~Age , data=reader_f)
knitr::opts_chunk$set(echo = FALSE,cache=FALSE,message=FALSE)
source("mainScriptCO2Emissions.R")
co2_SFH <- main_function("SFH" , "charlottenburg_wilmersdorf")
co2_MFH <- main_function("MFH" , "charlottenburg_wilmersdorf")
co2_ALL <- co2_SFH + co2_MFH
co2_ALL$abrechnungsjahr <- 2002:2018
co2_SFH <- co2_SFH/1e7
co2_MFH <- co2_MFH/1e7
co2_ALL <- co2_ALL/1e7
co2_SFH$abrechnungsjahr <- 2002:2018
co2_MFH$abrechnungsjahr <- 2002:2018
co2_ALL$abrechnungsjahr <- 2002:2018
co2_MFH_rel <- find_proportions(co2_MFH , c("abrechnungsjahr" , "total"))
co2_MFH_rel <- getRowSums(co2_MFH_rel , "abrechnungsjahr")
co2_SFH_rel <- find_proportions(co2_SFH , c("abrechnungsjahr" , "total"))
co2_SFH_rel <- getRowSums(co2_SFH_rel , "abrechnungsjahr")
co2_ALL_rel <- find_proportions(co2_ALL , c("abrechnungsjahr" , "total"))
co2_ALL_rel <- getRowSums(co2_ALL_rel , "abrechnungsjahr")
source("getCumSums.R")
co2_SFH_cumsums <- getCumSums(co2_SFH , c("abrechnungsjahr","total"))
co2_MFH_cumsums <- getCumSums(co2_MFH , c("abrechnungsjahr","total"))
co2_ALL_cumsums <- getCumSums(co2_ALL , c("abrechnungsjahr","total"))
co2_SFH_rel_cumsums <- getCumSums(co2_SFH_rel , c("abrechnungsjahr","total"))
co2_MFH_rel_cumsums <- getCumSums(co2_MFH_rel , c("abrechnungsjahr","total"))
co2_ALL_rel_cumsums <- getCumSums(co2_ALL_rel , c("abrechnungsjahr","total"))
et_list <- names(co2_SFH)[!(names(co2_SFH) %in% c("abrechnungsjahr","total"))]
col_list <- c("royalblue4","orangered1","gray59","orange","blue","olivedrab4")
cols <- c(
"erdgas"      = "royalblue4",
"waerme"      = "orangered1",
"fluessiggas" = "gray59",
"heizoel"     = "orange",
"holzpellets" = "blue",
"strom"       = "olivedrab4"
)
plot_title <- NULL
order_legend <- rev(c("erdgas","waerme","fluessiggas","heizoel","holzpellets","strom"))
order_labels <- rev(c("Erdgas","Wärme (N+F)","Flüssiggas","Heizöl","Holzpellets","Strom (D+WP)"))
require(ggplot2)
plot_byET <- function(obj,xlabel,ylabel,plottitle) {
ggplot()+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[1]),color=et_list[1]),size=1
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[2]),color=et_list[2])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[3]),color=et_list[3])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[4]),color=et_list[4])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[5]),color=et_list[5])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[6]),color=et_list[6])
)+scale_color_manual(labels=order_labels,name=" ",values=cols,breaks=order_legend
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[6])),fill=col_list[6]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[5])),fill=col_list[5]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[4])),fill=col_list[4]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[3])),fill=col_list[3]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[2])),fill=col_list[2]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[1])),fill=col_list[1])+theme_bw()+ labs(x=xlabel,y=ylabel,title=plottitle) + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20, face="bold"), axis.title.y=element_text(size=20, face="bold"), legend.text = element_text(size=15), axis.text.x=element_text(size=15,face="bold"), axis.text.y=element_text(size=15,face="bold"), legend.key.size=unit(2, "lines")
)+scale_x_continuous(breaks=seq(2002,2018,2))
}
plot_byET(co2_SFH_cumsums , "Jahr" , "kilo t." , NULL)
require(ggplot2)
plot_byET <- function(obj,xlabel,ylabel,plottitle) {
ggplot()+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[1]),color=et_list[1]),size=5
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[2]),color=et_list[2])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[3]),color=et_list[3])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[4]),color=et_list[4])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[5]),color=et_list[5])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[6]),color=et_list[6])
)+scale_color_manual(labels=order_labels,name=" ",values=cols,breaks=order_legend
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[6])),fill=col_list[6]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[5])),fill=col_list[5]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[4])),fill=col_list[4]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[3])),fill=col_list[3]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[2])),fill=col_list[2]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[1])),fill=col_list[1])+theme_bw()+ labs(x=xlabel,y=ylabel,title=plottitle) + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20, face="bold"), axis.title.y=element_text(size=20, face="bold"), legend.text = element_text(size=15), axis.text.x=element_text(size=15,face="bold"), axis.text.y=element_text(size=15,face="bold"), legend.key.size=unit(2, "lines")
)+scale_x_continuous(breaks=seq(2002,2018,2))
}
plot_byET(co2_SFH_cumsums , "Jahr" , "kilo t." , NULL)
plot_byET(co2_SFH_rel_cumsums , "Jahr" , "Anteile" , NULL)
co2_SFH_rel_cumsums
co2_SFH_rel_cumsums
co2_SFH_rel_cumsums
plot_byET(co2_MFH_cumsums , "Jahr" , "kilo t." , NULL)
plot_byET(co2_MFH_rel_cumsums , "Jahr" , "Anteile" , NULL)
plot_byET(co2_ALL_cumsums , "Jahr" , "kilo t." , NULL)
plot_byET(co2_ALL_rel_cumsums , "Jahr" , "Anteile" , NULL)
linearizer <- function(obj) {
obj_new <- obj
storage <- list()
for (et in et_list) {
storage[[et]] <- lm(get(et) ~ abrechnungsjahr , data = obj)
obj_new[[et]] <- as.numeric(predict(storage[[et]] , newdata = obj))
}
return(obj_new)
}
co2_SFH_cumsums_linear <- linearizer(co2_SFH_cumsums)
plot_byET(co2_SFH_cumsums_linear , "Jahr" , "kilo t." , NULL)
co2_SFH_rel_cumsums_linear <- linearizer(co2_SFH_rel_cumsums)
plot_byET(co2_SFH_rel_cumsums_linear , "Jahr" , "Anteile" , NULL)
co2_SFH_rel_cumsums
rowSums(co2_SFH_rel_cumsums)
lm_heizoel <- lm(heizoel ~ abrechnungsjahr , data = co2_SFH_rel_cumsums)
co2_SFH_rel_cumsums["heizoel"]
predict(lm_heizoel , newdata = co2_SFH_rel_cumsums["heizoel"])
predict(lm_heizoel , newdata = co2_SFH_rel_cumsums["abrechnungsjahr"])
co2_SFH_rel_cumsums_linear
knitr::opts_chunk$set(echo = FALSE,cache=FALSE,message=FALSE)
source("mainScriptCO2Emissions.R")
co2_SFH <- main_function("SFH" , "charlottenburg_wilmersdorf")
co2_MFH <- main_function("MFH" , "charlottenburg_wilmersdorf")
co2_ALL <- co2_SFH + co2_MFH
co2_ALL$abrechnungsjahr <- 2002:2018
co2_SFH <- co2_SFH/1e7
co2_MFH <- co2_MFH/1e7
co2_ALL <- co2_ALL/1e7
co2_SFH$abrechnungsjahr <- 2002:2018
co2_MFH$abrechnungsjahr <- 2002:2018
co2_ALL$abrechnungsjahr <- 2002:2018
co2_MFH_rel <- find_proportions(co2_MFH , c("abrechnungsjahr" , "total"))
co2_MFH_rel <- getRowSums(co2_MFH_rel , "abrechnungsjahr")
co2_SFH_rel <- find_proportions(co2_SFH , c("abrechnungsjahr" , "total"))
co2_SFH_rel <- getRowSums(co2_SFH_rel , "abrechnungsjahr")
co2_ALL_rel <- find_proportions(co2_ALL , c("abrechnungsjahr" , "total"))
co2_ALL_rel <- getRowSums(co2_ALL_rel , "abrechnungsjahr")
source("getCumSums.R")
co2_SFH_cumsums <- getCumSums(co2_SFH , c("abrechnungsjahr","total"))
co2_MFH_cumsums <- getCumSums(co2_MFH , c("abrechnungsjahr","total"))
co2_ALL_cumsums <- getCumSums(co2_ALL , c("abrechnungsjahr","total"))
co2_SFH_rel_cumsums <- getCumSums(co2_SFH_rel , c("abrechnungsjahr","total"))
co2_MFH_rel_cumsums <- getCumSums(co2_MFH_rel , c("abrechnungsjahr","total"))
co2_ALL_rel_cumsums <- getCumSums(co2_ALL_rel , c("abrechnungsjahr","total"))
et_list <- names(co2_SFH)[!(names(co2_SFH) %in% c("abrechnungsjahr","total"))]
col_list <- c("royalblue4","orangered1","gray59","orange","blue","olivedrab4")
cols <- c(
"erdgas"      = "royalblue4",
"waerme"      = "orangered1",
"fluessiggas" = "gray59",
"heizoel"     = "orange",
"holzpellets" = "blue",
"strom"       = "olivedrab4"
)
plot_title <- NULL
order_legend <- rev(c("erdgas","waerme","fluessiggas","heizoel","holzpellets","strom"))
order_labels <- rev(c("Erdgas","Wärme (N+F)","Flüssiggas","Heizöl","Holzpellets","Strom (D+WP)"))
require(ggplot2)
plot_byET <- function(obj,xlabel,ylabel,plottitle) {
ggplot()+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[1]),color=et_list[1]),size=5
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[2]),color=et_list[2])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[3]),color=et_list[3])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[4]),color=et_list[4])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[5]),color=et_list[5])
)+geom_line(data=obj,aes(x=abrechnungsjahr,y=get(et_list[6]),color=et_list[6])
)+scale_color_manual(labels=order_labels,name=" ",values=cols,breaks=order_legend
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[6])),fill=col_list[6]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[5])),fill=col_list[5]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[4])),fill=col_list[4]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[3])),fill=col_list[3]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[2])),fill=col_list[2]
)+geom_ribbon(data=obj,aes(x=abrechnungsjahr,ymin=0,ymax=get(et_list[1])),fill=col_list[1])+theme_bw()+ labs(x=xlabel,y=ylabel,title=plottitle) + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20, face="bold"), axis.title.y=element_text(size=20, face="bold"), legend.text = element_text(size=15), axis.text.x=element_text(size=15,face="bold"), axis.text.y=element_text(size=15,face="bold"), legend.key.size=unit(2, "lines")
)+scale_x_continuous(breaks=seq(2002,2018,2))
}
plot_byET(co2_SFH_cumsums , "Jahr" , "kilo t." , NULL)
plot_byET(co2_SFH_rel_cumsums , "Jahr" , "Anteile" , NULL)
plot_byET(co2_MFH_cumsums , "Jahr" , "kilo t." , NULL)
plot_byET(co2_MFH_rel_cumsums , "Jahr" , "Anteile" , NULL)
plot_byET(co2_ALL_cumsums , "Jahr" , "kilo t." , NULL)
plot_byET(co2_ALL_rel_cumsums , "Jahr" , "Anteile" , NULL)
linearizer <- function(obj) {
obj_new <- obj
storage <- list()
for (et in et_list) {
storage[[et]] <- lm(get(et) ~ abrechnungsjahr , data = obj)
obj_new[[et]] <- as.numeric(predict(storage[[et]] , newdata = obj))
}
return(obj_new)
}
et_list
co2_SFH_cumsums_linear <- linearizer(co2_SFH_cumsums)
plot_byET(co2_SFH_cumsums_linear , "Jahr" , "kilo t." , NULL)
co2_SFH_cumsums_linear
co2_SFH_rel_cumsums_linear <- find_proportions(co2_SFH_cumsums_linear , "abrechnungsjahr")
#plot_byET(co2_SFH_rel_cumsums_linear , "Jahr" , "Anteile" , NULL)
co2_SFH_rel_cumsums_linear
co2_SFH
co2_SFH_linear <- linearizer(co2_SFH , c("abrechnungsjahr","total"))
linearizer <- function(obj,dropCols,xVar) {
obj_new <- obj[ , !(names(obj) %in% dropCols)]
feature_list <- names(obj_new)[ !(names(obj_new) %in% c(dropCols,xVar)) ]
storage <- list()
for (feature in feature_list) {
storage[[feature]] <- lm(get(feature) ~ get(xVar) , data = obj)
obj_new[[feature]] <- as.numeric(predict(storage[[feature]] , newdata = obj))
}
return(obj_new)
}
co2_SFH_cumsums
co2_SFH_cumsums_linear <- linearizer(co2_SFH_cumsums , NULL , "abrechnungsjahr")
#co2_SFH_cumsums_linear <- linearizer(co2_SFH_cumsums)
co2_SFH_cumsums_linear <- linearizer(co2_SFH_cumsums , NULL , "abrechnungsjahr")
plot_byET(co2_SFH_cumsums_linear , "Jahr" , "kilo t." , NULL)
co2_SFH
co2_SFH
co2_SFH_linear <- linearizer(co2_SFH_cumsums,"total","abrechnungsjahr")
co2_SFH_linear
co2_SFH_linear_cumsums <- getCumSums(co2_SFH_linear , "abrechnungsjahr")
plot_byET(co2_SFH_linear_cumsums , "Jahr" , "kilo t." , NULL)
co2_SFH
co2_SFH_linear <- linearizer(co2_SFH,"total","abrechnungsjahr")
co2_SFH_linear
co2_SFH_linear_cumsums <- getCumSums(co2_SFH_linear , "abrechnungsjahr")
plot_byET(co2_SFH_linear_cumsums , "Jahr" , "kilo t." , NULL)
co2_SFH_linear
co2_SFH_linear
co2_SFH_linear_cumsums <- getCumSums(co2_SFH_linear , "abrechnungsjahr")
co2_SFH_linear_cumsums
plot_byET(co2_SFH_linear_cumsums , "Jahr" , "kilo t." , NULL)
co2_SFH_linear
co2_SFH_linear_rel <- find_proportions(co2_SFH_linear , "abrechnungsjahr")
co2_SFH_linear_rel
rowSums(co2_SFH_linear_rel)
co2_SFH_linear_rel
co2_SFH_linear_rel <- find_proportions(co2_SFH_linear , "abrechnungsjahr")
co2_SFH_linear_rel_cumsums <- getCumSums(co2_SFH_linear_rel , "abrechnungsjahr")
plot_byET(co2_SFH_linear_rel_cumsums , "Jahr" , "Anteile" , NULL)
co2_SFH_linear_rel <- find_proportions(co2_SFH_linear , "abrechnungsjahr")
co2_SFH_linear_rel_cumsums <- getCumSums(co2_SFH_linear_rel , "abrechnungsjahr")
plot_byET(co2_SFH_linear_rel_cumsums , "Jahr" , "Anteile" , NULL)
co2_SFH_linear_rel
co2_SFH_linear_rel <- find_proportions(co2_SFH_linear , "abrechnungsjahr")
co2_SFH_linear_rel_cumsums <- getCumSums(co2_SFH_linear_rel , "abrechnungsjahr")
plot_byET(co2_SFH_linear_rel_cumsums , "Jahr" , "Anteile" , NULL)
co2_SFH_linear
co2_SFH_linear <- linearizer(co2_SFH,"total","abrechnungsjahr")
co2_SFH_linear_cumsums <- getCumSums(co2_SFH_linear , "abrechnungsjahr")
plot_byET(co2_SFH_linear_cumsums , "Jahr" , "kilo t." , NULL)
co2_MFH_linear <- linearizer(co2_MFH,"total","abrechnungsjahr")
co2_MFH_linear_cumsums <- getCumSums(co2_MFH_linear , "abrechnungsjahr")
plot_byET(co2_MFH_linear_cumsums , "Jahr" , "kilo t." , NULL)
co2_MFH_linear_rel <- find_proportions(co2_MFH_linear , "abrechnungsjahr")
co2_MFH_linear_rel_cumsums <- getCumSums(co2_MFH_linear_rel , "abrechnungsjahr")
plot_byET(co2_MFH_linear_rel_cumsums , "Jahr" , "Anteile" , NULL)
co2_ALL_linear <- linearizer(co2_ALL,"total","abrechnungsjahr")
co2_ALL_linear_cumsums <- getCumSums(co2_ALL_linear , "abrechnungsjahr")
plot_byET(co2_ALL_linear_cumsums , "Jahr" , "kilo t." , NULL)
co2_ALL_linear_rel <- find_proportions(co2_ALL_linear , "abrechnungsjahr")
co2_ALL_linear_rel_cumsums <- getCumSums(co2_ALL_linear_rel , "abrechnungsjahr")
plot_byET(co2_ALL_linear_rel_cumsums , "Jahr" , "Anteile" , NULL)
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/BezirkAnalysis")
source("getBerlinData.R"           )
gtype <- "SFH"   # SFH or MFH
berlin_data <- getBerlinData(gtype)
dir.create("abc")
rm(list=ls())
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/BezirkAnalysis")
source("getBerlinData.R"           )
gtype <- "SFH"   # SFH or MFH
berlin_data <- getBerlinData(gtype)
unique(berlin_data$bezirk)
sort(unique(berlin_data$bezirk))
as.character(1:n_bezirk)
n_bezirk <- length(bezirk_list)
bezirk_list <- sort(unique(berlin_data$bezirk))
n_bezirk <- length(bezirk_list)
as.character(1:n_bezirk)
nchar(as.character(1:n_bezirk))
nchar(as.character(1:n_bezirk))==1
n_bezirk <- as.character(1:length(bezirk_list))
n_bezirk
nchar(n_bezirk)==1
n_bezirk[nchar(n_bezirk)==1]
n_bezirk[nchar(n_bezirk)==1] <- paste0("0",n_bezirk[nchar(n_bezirk)==1])
n_bezirk
paste0(c("a","b") , c("c" , "d"))
dir_names <- paste0(n_bezirk , bezirk_list)
dir_names
dir_names <- paste0(n_bezirk , "_", bezirk_list)
dir_names
for (dir_name in dir_names) {
dir.create(dir_name)
}
setwd("01_charlottenburg_wilmersdorf/")
library(sf)
library(ggplot2)
library(tmap)
library(tmaptools)
library(leaflet)
library(dplyr)
options(scipen = 999)
setwd("D:/GITHUB_REPOS/co2emissions/Berlin/Postleitzahl/Bhaskar-Berlin_Bezirksgrenzen.shp")
mydata <- read.csv("bezirklist.csv" , ,sep=";" , stringsAsFactors = FALSE)
mymap <- st_read("bezirksgrenzen.shp" , stringsAsFactors = FALSE)
str(mymap)
names(mymap)[names(mymap) == "Gemeinde_n"] <- "bezirk"
map_and_data <- inner_join(mymap,mydata)
